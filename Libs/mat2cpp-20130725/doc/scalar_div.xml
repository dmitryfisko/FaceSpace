<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Scalar Division</title>
<meta name="description" id="description" content="Scalar Division"/>
<meta name="keywords" id="keywords" content=" scalar division scalar_div "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_scalar_div_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.seanet.com/~bradbell/home.htm" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="element_unary.cpp.xml" target="_top">Prev</a>
</td><td><a href="scalar_prod.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>mat2cpp</option>
<option>operation</option>
<option>elementwise</option>
<option>scalar_div</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>mat2cpp-&gt;</option>
<option>License</option>
<option>getstarted</option>
<option>operation</option>
<option>mat2cpp.hpp</option>
<option>mat2cpp_ok.m</option>
<option>mat2cpp_ok.cpp</option>
<option>News</option>
<option>library</option>
<option>mztuni</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>operation-&gt;</option>
<option>elementwise</option>
<option>matrixwise</option>
<option>scalar_valued</option>
<option>other</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>elementwise-&gt;</option>
<option>add</option>
<option>element_div</option>
<option>element_prod</option>
<option>element_unary</option>
<option>scalar_div</option>
<option>scalar_prod</option>
<option>sub</option>
</select>
</td>
<td>scalar_div</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Matlab or Octave</option>
<option>---..Example</option>
<option>C++</option>
<option>---..Example</option>
</select>
</td>
</tr></table><br/>







<center><b><big><big>Scalar Division</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<table><tr><td align='left'  valign='top'>

<b>Matlab or Octave</b> </td><td align='left'  valign='top'>
 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i>
</td></tr><tr><td align='left'  valign='top'>

<b>C++</b> </td><td align='left'  valign='top'>
 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i>
</td></tr><tr><td align='left'  valign='top'>
 </td><td align='left'  valign='top'>

<code><font color="blue"></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/=&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i>
</td></tr>
</table>
<br/>
<b><big><a name="Matlab or Octave" id="Matlab or Octave">Matlab or Octave</a></big></b>

<i><br/>
x</i> is an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 matrix
and <i>y</i> is a scalar,
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>set <i>z</i> to the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 matrix with 
the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 element given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>z</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>x</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
<mo stretchy="false">/</mo>
<mi mathvariant='italic'>y</mi>
</mrow></math>

<br/>
<b><a name="Matlab or Octave.Example" id="Matlab or Octave.Example">Example</a></b>

<code><font color="blue">
<br/>
<pre style='display:inline'>     function [ok] = scalar_div_ok()
     ok  = true;
     m   = 3;
     n   = 2;
     x   = rand(m, n);
     y   = rand(1, 1);
     % -------------
     z      = x / y;
     % -------------
     [m, n] = size(z);
     ok     = ok &amp; (m == 3);
     ok     = ok &amp; (n == 2);
     for i = [1 : m]
     	for j = [1 : n]
     		zij = x(i, j) / y;
     		ok  = ok &amp; abs(z(i, j) - zij) &lt; 1e-10;
     	end
     end
     return 
</pre><br/>
</font></code><br/>
<b><big><a name="C++" id="C++">C++</a></big></b>
<br/>
The corresponding C++ syntax is
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>where <i>x</i>, <i>z</i> are 
ublas <code><font color="blue">matrix&lt;double&gt;</font></code> objects of size 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 and
<i>y</i> is a <code><font color="blue">double</font></code> object.
In the case where <i>x</i> and <i>z</i> are the same matrix,
you should use
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;/=&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code><br/>
<b><a name="C++.Example" id="C++.Example">Example</a></b>

<code><font color="blue">
<br/>
<pre style='display:inline'>     # include &lt;cstdlib&gt;
     # include &lt;mat2cpp.hpp&gt;
     bool scalar_div_ok(void)
     {	bool   ok  = true;
     	using namespace mat2cpp;
     
     	size_t i, j, m(3), n(2);
     	matrix&lt;double&gt; x = rand(m, n);
     	double         y = std::rand() / double(RAND_MAX);
     	// ----------------------
     	matrix&lt;double&gt; z = x / y;
     	z  /= y;
     	// ----------------------
     	ok &amp;= (z.size1() == m);
     	ok &amp;= (z.size2() == n);
     	for(i = 0; i &lt; m; i++)
     	{	for(j = 0; j &lt; n; j++)
     		{	double zij = (x(i,j) / y) / y;
     			ok &amp;= std::fabs(z(i, j) - zij) &lt; 1e-10;
     		}
     	}
     	return ok;
     }
</pre><br/>
</font></code>
<hr/>Input File: omh/scalar_div.omh

</body>
</html>
