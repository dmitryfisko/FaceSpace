<?xml version='1.0'?>
<html xmlns='http://www.w3.org/1999/xhtml'
      xmlns:math='http://www.w3.org/1998/Math/MathML'
>
<head>
<title>Diagonal Matrix Product with General Matrix</title>
<meta name="description" id="description" content="Diagonal Matrix Product with General Matrix"/>
<meta name="keywords" id="keywords" content=" diagonal product diag_prod "/>
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_diag_prod_xml.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.seanet.com/~bradbell/home.htm" target="_top"><img border="0" src="_image.gif"/></a>
</td>
<td><a href="matrixwise.xml" target="_top">Prev</a>
</td><td><a href="diag_prod.cpp.xml" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>mat2cpp</option>
<option>operation</option>
<option>matrixwise</option>
<option>diag_prod</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>mat2cpp-&gt;</option>
<option>License</option>
<option>getstarted</option>
<option>operation</option>
<option>mat2cpp.hpp</option>
<option>mat2cpp_ok.m</option>
<option>mat2cpp_ok.cpp</option>
<option>News</option>
<option>library</option>
<option>mztuni</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>operation-&gt;</option>
<option>elementwise</option>
<option>matrixwise</option>
<option>scalar_valued</option>
<option>other</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>matrixwise-&gt;</option>
<option>diag_prod</option>
<option>cholesky</option>
<option>matrix_div</option>
<option>matrix_prod</option>
<option>transpose</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>diag_prod-&gt;</option>
<option>diag_prod.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Matlab or Octave</option>
<option>---..Example</option>
<option>C++</option>
<option>---..Example</option>
<option>---..Source</option>
</select>
</td>
</tr></table><br/>
<center><b><big><big>Diagonal Matrix Product with General Matrix</big></big></b></center>
<br/>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<table><tr><td align='left'  valign='top'>

<b>Matlab or Octave</b> </td><td align='left'  valign='top'>
 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;diag(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i>
</td></tr><tr><td align='left'  valign='top'>

<b>C++</b> </td><td align='left'  valign='top'>
 
<code><font color="blue"></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;diag_prod(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>)</span></font></code>
</td></tr>
</table>
<br/>
<b><big><a name="Matlab or Octave" id="Matlab or Octave">Matlab or Octave</a></big></b>
<br/>
If <i>x</i> is an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>1</mn>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>m</mi>
</mrow></math>

 or 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mn>1</mn>
</mrow></math>

 matrix,
and <i>y</i> are a 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 matrix,
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;diag(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>)&#xA0;*&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'><br/>
</span></font></code>sets <i>z</i> to the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

 matrix with 
the 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mo stretchy="false">(</mo>
<mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
<mo stretchy="false">)</mo>
</mrow></math>

 element given by

<math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mrow>
<msub><mi mathvariant='italic'>z</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
<mo stretchy="false">=</mo>
<msub><mi mathvariant='italic'>x</mi>
<mi mathvariant='italic'>i</mi>
</msub>
<mo stretchy="false">*</mo>
<msub><mi mathvariant='italic'>y</mi>
<mrow><mi mathvariant='italic'>i</mi>
<mo stretchy="false">,</mo>
<mi mathvariant='italic'>j</mi>
</mrow>
</msub>
</mrow></math>

<br/>
<b><a name="Matlab or Octave.Example" id="Matlab or Octave.Example">Example</a></b>

<code><font color="blue">
<br/>
<pre style='display:inline'>     function [ok] = diag_prod_ok()
     ok  = true;
     m   = 3;
     n   = 2;
     x   = rand(1, m);
     y   = rand(m, n);
     % -------------------
     z      = diag(x) * y;
     % -------------------
     [m, n] = size(z);
     ok     = ok &amp; (m == 3);
     ok     = ok &amp; (n == 2);
     for i = [1 : m]
     	for j = [1 : n]
     		zij = x(i) * y(i, j);
     		ok  = ok &amp; abs(z(i, j) - zij) &lt; 1e-10;
     	end
     end
     return 
</pre><br/>
</font></code><br/>
<b><big><a name="C++" id="C++">C++</a></big></b>
<br/>
The following is a C++ implementation of the operation above 
with the syntax
<code><font color="blue"><span style='white-space: nowrap'><br/>
&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;</span></font></code><i><span style='white-space: nowrap'>z</span></i><code><font color="blue"><span style='white-space: nowrap'>&#xA0;=&#xA0;diag_prod(</span></font></code><i><span style='white-space: nowrap'>x</span></i><code><font color="blue"><span style='white-space: nowrap'>,&#xA0;</span></font></code><i><span style='white-space: nowrap'>y</span></i><code><font color="blue"><span style='white-space: nowrap'>)<br/>
</span></font></code>where <i>x</i> is an 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mn>1</mn>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>m</mi>
</mrow></math>

 or 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mn>1</mn>
</mrow></math>

 
ublas <code><font color="blue">matrix&lt;double&gt;</font></code> object, 
and <i>y</i>, <i>z</i> are  ublas <code><font color="blue">matrix&lt;double&gt;</font></code> objects 
with size 
<math xmlns="http://www.w3.org/1998/Math/MathML" display="inline"><mrow>
<mi mathvariant='italic'>m</mi>
<mo stretchy="false">&#x000D7;</mo>
<mi mathvariant='italic'>n</mi>
</mrow></math>

.

<br/>
<br/>
<b><a name="C++.Example" id="C++.Example">Example</a></b>

<code><font color="blue">
<br/>
<pre style='display:inline'>     # include &lt;mat2cpp.hpp&gt;
     bool diag_prod_ok(void)
     {	bool   ok  = true;
     	using namespace mat2cpp;
     
     	size_t i, j, m(3), n(2);
     	matrix&lt;double&gt; u = rand(m, 1);
     	matrix&lt;double&gt; x = rand(1, m);
     	matrix&lt;double&gt; y = rand(m, n);
     	// --------------------------------
     	matrix&lt;double&gt; w = diag_prod(u, y);
     	matrix&lt;double&gt; z = diag_prod(x, y);
     	// --------------------------------
     	ok &amp;= (z.size1() == m);
     	ok &amp;= (z.size2() == n);
     	for(i = 0; i &lt; m; i++)
     	{	for(j = 0; j &lt; n; j++)
     		{	double wij = u(i,0) * y(i,j);
     			double zij = x(0,i) * y(i,j);
     			ok &amp;= std::fabs(w(i, j) - wij) &lt; 1e-10;
     			ok &amp;= std::fabs(z(i, j) - zij) &lt; 1e-10;
     		}
     	}
     	return ok;
     }
</pre><br/>
</font></code><br/>
<b><a name="C++.Source" id="C++.Source">Source</a></b>
<br/>
The file <a href="diag_prod.cpp.xml" target="_top"><span style='white-space: nowrap'>diag_prod.cpp</span></a>
 contains the 
C++ source code for these functions.


<hr/>Input File: omh/diag_prod.omh

</body>
</html>
